import os
import sys

from setuptools import find_packages, setup

if sys.version_info[0:2] < (3, 5):
    raise RuntimeError("Python version >= 3.5 required.")

COMPILE_ERROR_MSG = """
Check the compiler error above for details.
Possible solutions:
    * Download a distribution with the required libraries compiled.
      (not available for Linux)
    * If you are on Linux, check out that you can build from source.
      (for example, install a python-dev package for your distro)
"""



path = os.path.abspath(os.path.dirname(__file__))
sys.path.append(os.path.join(path, 'src'))
import rustypy
with open(os.path.join(path, 'README.md')) as f:
    long_description = f.read()

setup(
    name="rustypy",
    version=rustypy.__version__,
    description='Automatic FFI generation for Python <-> Rust interfacing.',
    long_description=long_description,
    url='https://github.com/iduartgomez/rustypy',

    author='The Python Packaging Authority',
    author_email='iduartgomez@gmail.com',
    license='BSD 3-Clause',
    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers
    classifiers=[
        'Development Status :: 1 - Planning',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Operating System :: POSIX',
        'Programming Language :: Python :: 3.5'
    ],
    keywords='rust autogenerated FFI',
    packages=find_packages('src'),
    package_dir={'': 'src'},
    setup_requires=["cffi"],
    install_requires=['cffi'],
    entry_points={
        'console_scripts': [
            'rustypy=rustypy.scripts:cli',
        ],
    },
)

def compile_library():
    """Package setup Rust bind compilation."""
    from cffi.ffiplatform import VerificationError, get_extension

    # try to see if a file a file exists already for the platform
    if sys.platform.startswith("win"):
        libdir = os.path.join(path, 'src\\rustypy\\lib')
        #rspy = os.path.join(path, 'src\\rustypy\\')
        ext = "\.dll"
    elif sys.platform == "darwin":
        libdir = os.path.join(path, 'src/rustypy/lib')
        #rspy = os.path.join(path, 'src/rustypy/')
        ext = "\.dylib"
    else:
        libdir = os.path.join(path, 'src/rustypy/lib')
        #rspy = os.path.join(path, 'src/rustypy/')
        ext = "\.so"

    print("Search for compiled Python C API ")
    nolib = True
    if os.path.exists(libdir):
        import re
        rgx = re.compile(r"(rustypy_C_API.*{})".format(ext), re.I)
        for f in os.listdir(libdir):
            if rgx.match(f):
                nolib = False
    # if not found try to compile from setup
    if nolib:
        from importlib import import_module
        module = import_module('rustypy.scripts')
        print("No compiled requeriments found. Attempting to compile ...")
        try:
            module._compile_API()
        except VerificationError as err:
            # CFFI - distutils failed to compile try to see if a file
            # a file exists already for the platform
            print(COMPILE_ERROR_MSG)
            raise err
        finally:
            sys.path.pop()
